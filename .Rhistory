xlab = "Age",
ylab = "Weight",
pch = 16,
col = rgb(0, 0, 1, 0.6))
boxplot(pups$weight ~ pups$clutch,
main = "Boxplot default",
xlab = "Birth group/Clutch",
ylab = "Weight")
weight<- pups$weight
age <- pups$age
plot(weight ~ age,
main = "Pup weight vs. Age",
xlab = "Age",
ylab = "Weight",
pch = 16,
col = rgb(0, 0, 1, 0.6)) # comparing Y ~ X
cov(weight, age)#covariance of cov(Y, x)
covparts <- (age - mean(age)) * (weight - mean(weight))
plot(age, weight,
main = "scatterplot with point size = covariance contribution",
col = ifelse(covparts> 0, rgb(0, 0, 1, 0.6), rgb(1, 0, 0, 0.6)),
pch = 16, cex = abs(covparts)^0.3,
xlab = "Age", ylab = "Weight")
abline(h = mean(weight), col = "black")
abline(v = mean(age), col = "black")
legend("bottomright", legend = c("Positive", "Negative"),
pch = 19,
col = c(rgb(0, 0, 1, 0.6), rgb(1, 0, 0, 0.6)))
labs <- c(4, 16, 18, 22)
text(age[labs] , weight[labs],
round(covparts[labs], 1),
adj = c(0.5, 0.25) ,
cex = abs(covparts[labs])^0.1 / 1.5)
cor(weight, age)
cov(weight, age) / (sd(weight) * sd(age))
lm(weight ~ age)
reg <- lm(weight ~ age)
plot(weight ~ age,
main = "Pup Weight vs. Age",
xlab = "Age"
ylab = "Weight",
pch = 16, col = rgb(0, 0, 1, 0.6))
abline(reg, col = "red")
plot(weight ~ age,
main = "Pup Weight vs. Age",
xlab = "Age"
ylab = "Weight",
pch = 16, col = rgb(0, 0, 1, 0.6))
plot(weight ~ age,
main = "Pup Weight vs. Age",
xlab = "Age",
ylab = "Weight",
pch = 16, col = rgb(0, 0, 1, 0.6))
abline(reg, col = "red")
puplength <- pupdata$length
pupdata <- read.csv("https://uw-statistics.github.io/Stat311LabAssignments/data/pups_lab2.csv")
pupage <- pupdata$age
puplength <- pupdata$length
plot(puplength ~ pupage,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
mean(puplength)
mean(pupage)
sd(puplength)
sd(pupage)
round(mean(puplength), 2)
round(mean(pupage), 2)
round(sd(puplength), 2)
round(sd(pupage), 2)
lm(pupage, puplength)
lm(pupage ~ puplength)
lm(puplength ~ pupage)
XY <- (pupage - mean(pupage)) * (puplength - mean(puplength))
XX <- (pupage - mean(pupage))^2
SXY <- sum((pupage - mean(pupage)) * (puplength - mean(puplength)))
SXX <- sum((pupage - mean(pupage))^2)
SXX
SXY
SXY/SXX
b <- mean(puplength) - (SXY/SXX)(mean(pupage))
mean(puplength) - (SXY/SXX)(mean(pupage))
mean(puplength)-(SXY/SXX)(mean(pupage))
mean(puplength)-(SXY/SXX)*mean(pupage)
puplength.2 <- c(puplength, 105)
pupage.2 <- c(pupage, mean(pupage))
plot(puplength.2 ~ pupage.2,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
points(x = mean(pupage), y = 105, col='red', pch = 20)
reg.2 <- lm(puplength.2 ~ pupage.2)
reg.2
puplength.3 <- c(puplength, 105)
pupage.3 <- c(pupage, max(pupage))
plot(puplength.3 ~ pupage.3,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
points(x = max(pupage), y = 105, col='red', pch = 20)
reg.3 <- lm(puplength.3 ~ pupage.3))
reg.3 <- lm(puplength.3 ~ pupage.3)
reg.3
pupdata <- read.csv("https://uw-statistics.github.io/Stat311LabAssignments/data/pups_lab2.csv")
pupage <- pupdata$age
puplength <- pupdata$length
plot(puplength ~ pupage,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
round(mean(puplength), 2)
round(mean(pupage), 2)
round(sd(puplength), 2)
round(sd(pupage), 2)
lm(pupage ~ puplength)
lm(puplength ~ pupage)
XY <- (pupage - mean(pupage)) * (puplength - mean(puplength))
XX <- (pupage - mean(pupage))^2
SXY <- sum((pupage - mean(pupage)) * (puplength - mean(puplength)))
SXX <- sum((pupage - mean(pupage))^2)
SXX
SXY
SXY/SXX
mean(puplength)-(SXY/SXX)*mean(pupage)
puplength.2 <- c(puplength, 105)
pupage.2 <- c(pupage, mean(pupage))
plot(puplength.2 ~ pupage.2,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
points(x = mean(pupage), y = 105, col='red', pch = 20)
reg.2 <- lm(puplength.2 ~ pupage.2)
reg.2
puplength.3 <- c(puplength, 105)
pupage.3 <- c(pupage, max(pupage))
plot(puplength.3 ~ pupage.3,
main = "Pup length vs pup age", xlab = "Age", ylab = "Length",
pch = 16, col = "gray50")
points(x = max(pupage), y = 105, col='red', pch = 20)
reg.3 <- lm(puplength.3 ~ pupage.3)
reg.3
lm(puplength ~ pupage)
mean(pupage)-((SXY/SXX)*mean(puplength))
mean(puplength)-((SXY/SXX)*mean(pupage))
cor(puplength ~ pupage)
cor(puplength, pupage)
dbinom(12, size = 30, p= 0.40)
np
p = 0.40
n = 30
np
n*p
pbinom(9, size = 30, p = 0.40)
sum(dbinom(0:14, size = 30, p =0.40)
sum(dbinom(0:14, size = 30, p = 0.40))
sum(dbinom(0:14, size = 30, p = 0.40))
sum(dbinom(15:30, size = 30, p = 0.40))
sum(dbinom(10:20, size = 30, p = 0.40))
x<-dbinom(10:20, size 30, p =0.40)
barplot(x, names.arg = 10:20, main= "Binomail Approx
"))
barplot(x, names.arg = 10:20, main= "Binomail Approx")
n*p(1-p)
p = 0.40
n = 30
n*p
n*p(1-p)
n*p*(1-p)
dbinom(12, size = 30, p= 0.40)
p = 0.40
n = 30
n*p
pbinom(9, size = 30, p = 0.40)
pbinom(0:14, size = 30, p = 0.40))
pbinom(15:30, size = 30, p = 0.40))
Pbinom(9, size = 30, p = 0.40)
pbinom(9, size = 30, p = 0.40)
pbinom(0:14, size = 30, p = 0.40))
Pbinom(10:20, size = 30, p = 0.40)
pbinom(0:14, size = 30, p = 0.40)
pbinom(15:30, size = 30, p = 0.40)
pbinom(10:20, size = 30, p = 0.40)
1-pbinom(9, size = 30, p = 0.40)
1-pbinom(0:14, size = 30, p = 0.40)
pbinom(14, size = 30, p = 0.40)
1-pbinom(14, size = 30, p = 0.40)
pbinom(10, size = 30, p = 0.40) - pbinom(20, size = 30, p = 0.40)
pbinom(20, size = 30, p = 0.40) - pbinom(10, size = 30, p = 0.40)
x<-dnorm(10:20, size 30, p =0.4)
pnorm(20, 12, 0.15) - pnorm(10, 12, 0.15)
pnorm(20, 12, 2.68) - pnorm(10, 12, 2.68)
60*0.40
sqrt(60*0.40*(1-0.40))
60*0.50
sqrt(60*0.50*(1-0.50))
pbinom(20, size = 30, p = 0.40) - pbinom(9, size = 30, p = 0.40)
pnorm(20, 12, 2.68) - pnorm(9, 12, 2.68)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
removeDigits <- gsub('[0-9]', "", x)
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <-c ("INFO 201", "CSE 142", "mps-803c")
removeDigits(x)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
removeDigits <- gsub('[0-9]', "", x)
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <-c ("INFO 201", "CSE 142", "mps-803c")
removeDigits(x)
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <- ("INFO 201", "CSE 142", "mps-803c")
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <- c("INFO 201", "CSE 142", "mps-803c")
removeDigits(x)
removeDigits("INFO 201", "CSE 142", "mps-803c")
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
removeDigits <- gsub('[0-9]', "", x)
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
removeDigits
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <-c("INFO 201", "CSE 142", "mps-803c")
removeDigits
if (str_detect(c("INFO 201", "CSE 142", "mps-803c"), '[0-9]')){
print("oh no!")
} else {
print("Yay!")
}
if (str_detect('[0-9]'){
if (str_detect('[0-9]')){
print("oh no!")
} else {
print("Yay!")
}
install.packages(stringr
)
install.packages("stringr")
if (grepl('[0-9]',x)){
print("oh no!")
} else {
print("Yay!")
}
if (grepl(x,'[0-9]')){
print("oh no!")
} else {
print("Yay!")
}
# Create a variable `children` that are the rows of the data frame with information about
# children on the Titanic.
children <- data.frame(Titanic$child)
# Create a variable `children` that are the rows of the data frame with information about
# children on the Titanic.
children <- data.frame(Titanic$Child)
# Create a variable `children` that are the rows of the data frame with information about
# children on the Titanic.
children <- data.frame(Titanic$Sex)
# Create a variable `children` that are the rows of the data frame with information about
# children on the Titanic.
children <- Titanic[Titanic$Age]
## In this section, you'll work with some data that comes built into the R environment.
## Load the `Titanic` data set.  Inspect it's structure and data in it.
## You may just print a few lines of it, or use RStudio to `View()`
View(Titanic)
## This data set actually loads in a format called a *table*
## This is not a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the
## `data.frame()` function or `as.data.frame()` Be sure to **not** treat strings as
## factors!
as.data.frame(Titanic)
# Create a variable `children` that are the rows of the data frame with information about
# children on the Titanic.
children <- Titanic$Age
children<- Titanic[Titanic$Age == "Child"]
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(children)
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_loss <- Titanic[Survival = "No"]
most_loss
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_loss <- Titanic$Freq[Survival = "No"]
## You should convert the `Titanic` variable into a data frame; you can use the
## `data.frame()` function or `as.data.frame()` Be sure to **not** treat strings as
## factors!
as.data.frame(Titanic)
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_loss <- Titanic[Titanic$Survived = "No", max(Titanic$Freq)]
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_loss <- Titanic[Titanic$Survived == "No", max(Titanic$Freq)]
install.packages("dyplr")
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
update.packages()
updateR()
update.packages(ask =FALSE)
updateR(ask = FALSE)
install.packages("dyplr")
install.packages("C:/Users/Ethan/Downloads/RStudio-1.2.1335.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Ethan/Downloads/R-3.6.0 (1).tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Ethan/Downloads/Rtools35.exe", repos = NULL)
install.packages("C:/Users/Ethan/Downloads/R-3.6.0 (2).tar.gz", repos = NULL, type = "source")
installr::add_load_installr_on_startup_menu()
installr::add_load_installr_on_startup_menu()
installr()
installr()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
installr()
installr()
installr()
install.packages("dyplr")
library("dyplr")
install.packages("dyplr")
installr()
library(installr)
install.packages("installr")
install.packages("installr")
library("installr")
install.packages
install.packages()
install.packages(ask = FALSE)
updateR()
q()
install.packages("dyplr")
install.packages("dyplr")
library("dyplr")
dim(diamonds)
diamonds %>% sample.int(1000) %>% dim()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
library(installr)
install.packages("installr")
install.packages("installr")
updateR()
install.packages("dyplr")
library("dyplr")
install.packages("dyplr")
install.packages("C:/Users/Ethan/Downloads/R-3.6.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Ethan/Downloads/RStudio-1.2.1335.zip", repos = NULL, type = "win.binary")
api_key <- "AIzaSyDDNiCfxmBQId34Yto7et3IGtrx4Q7AkjU"
source("~/Documents/keys.R")
source("~/Documents/keys.R")
setwd('C:/Users/Ethan')
api_key <- "AIzaSyDDNiCfxmBQId34Yto7et3IGtrx4Q7AkjU"
source("~/Documents/keys.R")
source("keys.R")
setwd('C:/Users/Ethan')
api_key <- "AIzaSyDDNiCfxmBQId34Yto7et3IGtrx4Q7AkjU"
source("keys.R")
source("~/Documents/api_keys.R")
setwd("~/")
source("~/Documents/api_keys.R")
setwd("C:/Users/Ethan/Downloads/Info201/a6-apis-group-37")
setwd("~/")
source("~/Documents/api_keys.R")
setwd("~/")
source("~/Documents/api_keys.R")
source("~/Documents/api_keys.R")
getReps <- function(address) {
base <- "https://www.googleapis.com/civicinfo/v2/representatives"
query <- list(address=address, key=api_key)
address <- query[["address"]]
res <- GET(base, query=query)
content(res)
data <- content(res, "text") %>%
fromJSON()
offices_df <- data.frame(data$offices) %>% select(name, officialIndices) %>% unnest() %>% rename(position = name)
officials <- data.frame(data$officials) %>%
select(-channels,-address) %>% mutate(officialIndices = 0:(nrow(data$officials)-1))
result <- merge(offices_df, officials) %>% select(-officialIndices)
output <- result %>% replace(is.na(result), "not available") %>% replace(result == "NULL","Not Available")
}
source('C:/Users/Ethan/Downloads/Info201/a6-apis-group-37/process-data.R')
source("~/Documents/api_keys.R")
setwd("C:/Users/Ethan/Downloads/Info201/a6-apis-group-37")
setwd("C:/Users/Ethan
")"
setwd("C:/Users/Ethan")
setwd("C:/Users/Ethan")
source("~/Documents/api_keys.R")
setwd(~)
setwd("~")
source("~/Documents/api_keys.R")
source("~/Documents/api_keys.R")
source("~/Documents/api_keys.R")
library(knitr)
source("~/Documents/api_keys.R")
source("~/Documents/api_keys.R")
source("~/Documents/api_keys.R")
source('~/in class file r start.R')
source("~/Documents/api_keys.R")
shiny::runApp('C:/Users/Ethan/Downloads/Info201/a8-app-Ton3205')
print(state2012_voters)
# Is Sidney Crosby still the best hockey player in the world?
![Is Sidney Crosby still the best hockey player in the world?](imgs/SidneyCrosby.jpg)
setwd("C:/Users/Ethan/Downloads/Info201/finalproject_group37")
getwd()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sort
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
